- name: Add blobber user
  ansible.builtin.user:
    name: "{{ blobber_user }}"
  register: blobber_user_meta

- name: Create blobber dirs
  ansible.builtin.file:
    path: "{{ blobber_datadir }}"
    state: directory
    mode: '0777'
    owner: "{{ blobber_user }}"
    group: "{{ blobber_user }}"

- name: Ensure temporary directory exists
  ansible.builtin.file:
    path: "{{ temp_key_dir }}"
    state: directory
    owner: "{{ blobber_user }}"
    group: "{{ blobber_user }}"
    mode: '0777'

- name: Process blobber_private_keys
  ansible.builtin.set_fact:
    processed_keys: >
      {{ processed_keys | default([]) + [lookup('file', item) | b64decode] }}
  when: item | regex_search('.*/secrets/.*')
  loop: "{{ blobber_private_keys }}"
  loop_control:
    label: "{{ item }}"

- name: Set processed_keys to private_keys if not from secrets directory
  ansible.builtin.set_fact:
    processed_keys: "{{ blobber_private_keys }}"
  when: processed_keys is not defined


- name: Write each private key to a temporary file
  ansible.builtin.copy:
    content: "{{ item }}"
    dest: "{{ temp_key_dir }}/private_key_part_{{ loop.index }}"
    owner: "{{ blobber_user }}"
    group: "{{ blobber_user }}"
    mode: '0600'
  loop: "{{ processed_keys }}"
  loop_control:
    index_var: loop.index

- name: Assemble all keys into a single file
  ansible.builtin.assemble:
    src: "{{ temp_key_dir }}/"
    dest: "{{ blobber_datadir }}/privkeys.json"
    owner: "{{ blobber_user }}"
    group: "{{ blobber_user }}"
    mode: '0600'

- name: Clean up temporary files
  ansible.builtin.file:
    path: "{{ temp_key_dir }}"
    state: absent

- name: Run blobber container
  community.docker.docker_container:
    name: "{{ blobber_container_name }}"
    image: "{{ blobber_container_image }}"
    state: started
    restart_policy: always
    volumes: "{{ blobber_container_volumes }}"
    env: "{{ blobber_container_env }}"
    networks: "{{ blobber_container_networks }}"
    ports: "{{ blobber_container_ports }}"
    command: "{{ blobber_container_command + blobber_container_command_extra_args }} "
    user: "{{ blobber_user_meta.uid }}"
    pull: "{{ blobber_container_pull | bool }}"
